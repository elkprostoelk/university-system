// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversitySystem.Data;

#nullable disable

namespace UniversitySystem.Data.Migrations
{
    [DbContext(typeof(UniversitySystemDbContext))]
    [Migration("20220725230333_LessonsAdded_UserIdToLong_OneUserOneStudent")]
    partial class LessonsAdded_UserIdToLong_OneUserOneStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Chair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Chairs");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("LessonType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.LessonParticipant", b =>
                {
                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<bool>("Present")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("LessonId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("LessonParticipants", (string)null);
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Administrator",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Student",
                            Name = "student"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Teacher",
                            Name = "teacher"
                        });
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChairId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChairId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EducationForm")
                        .HasColumnType("int");

                    b.Property<int>("EducationalLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnteredOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AcademicTitle")
                        .HasColumnType("int");

                    b.Property<int>("ChairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiredOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScienceDegree")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChairId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HashingSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.HasIndex("LastName", "FirstName", "SecondName")
                        .HasDatabaseName("FullName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Chair", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Faculty", "Faculty")
                        .WithMany("Chairs")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Lesson", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.LessonParticipant", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Lesson", "Lesson")
                        .WithMany("LessonParticipants")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Data.Entities.Student", "Participant")
                        .WithMany("LessonParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Specialty", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Chair", "Chair")
                        .WithMany("Specialties")
                        .HasForeignKey("ChairId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Data.Entities.Faculty", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chair");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Student", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Data.Entities.Specialty", "Specialty")
                        .WithMany("Students")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Teacher", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Chair", "Chair")
                        .WithMany("Teachers")
                        .HasForeignKey("ChairId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Data.Entities.User", "User")
                        .WithOne("TeacherRole")
                        .HasForeignKey("UniversitySystem.Data.Entities.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chair");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.User", b =>
                {
                    b.HasOne("UniversitySystem.Data.Entities.Student", "StudentRole")
                        .WithOne("User")
                        .HasForeignKey("UniversitySystem.Data.Entities.User", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("StudentRole");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Chair", b =>
                {
                    b.Navigation("Specialties");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Faculty", b =>
                {
                    b.Navigation("Chairs");

                    b.Navigation("Specialties");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Lesson", b =>
                {
                    b.Navigation("LessonParticipants");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Specialty", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Student", b =>
                {
                    b.Navigation("LessonParticipants");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("UniversitySystem.Data.Entities.User", b =>
                {
                    b.Navigation("TeacherRole");
                });
#pragma warning restore 612, 618
        }
    }
}
